#    
stages:
#  - release
  - deploy

#upload-helm-release:
#  stage: release
#  image: sharuman/debiank8s:latest  
#  before_script:    
#    - curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
#    - export PATH=$PATH:/root/yandex-cloud/bin
#    - yc config set token $YC_TOK
#    - yc config set cloud-id $YC_CLOUD_ID
#    - yc config set folder-id $YC_FOLDER_ID
#    - mkdir -p ~/.kube
#    - yc managed-kubernetes cluster get-credentials sharuman-k8s-cluster --external --force
#    - chmod 644 ~/.kube/config         
#  script:    
#    - helm lint ./momo-store-chart
#    - CHART_FILE=$(helm package --version $VERSION ./momo-store-chart | grep "Successfully packaged chart" | awk '{print $NF}')    
#    - echo "Uploading ${CHART_FILE} to Nexus..."
#    - >
#       curl -v -u std-ext-001-022:QY52z4qs $NEXUS_HELM_REPO --upload-file ${CHART_FILE}
#  after_script:
#    - rm ~/.kube/config       
#  only:
#    changes:
#      - momo-store-chart/**/*


deploy:
  stage: deploy
  image: sharuman/debiank8s:latest
  environment:
    name: production/k8s
  before_script:    
    - curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
    - export PATH=$PATH:/root/yandex-cloud/bin
    - yc config set token $YC_TOK
    - yc config set cloud-id $YC_CLOUD_ID
    - yc config set folder-id $YC_FOLDER_ID
    - mkdir -p ~/.kube    
#    - yc managed-kubernetes cluster get-credentials sharuman-k8s-cluster --external --force    
    - chmod +x ../momo-store-chart/kubeconfig.sh
    - ../momo-store-chart/kubeconfig.sh    
    - chmod 644 ~/.kube/config      
    
#    - export CLUSTER_ID=$(yc managed-kubernetes cluster list --format json | jq -r '.[] | select(.name=="sharuman-k8s-cluster") | .id')
#    # Получаем сертификат
#    - >
#       yc managed-kubernetes cluster get --id $CLUSTER_ID --format json | 
#       jq -r .master.master_auth.cluster_ca_certificate | 
#       awk '{gsub(/\\n/,"\n")}1' > ca.pem
#    - CERT_CONTENT=$(base64 -w 0 ca.pem)
#    # Подготавливаем токен
#    - >
#       SA_TOKEN=$(kubectl -n kube-system get secret $(kubectl -n kube-system get secret | 
#       grep admin-user-token | 
#       awk '{print $1}') -o json | 
#       jq -r .data.token | 
#       base64 -d)
#    # Получаем IP-адрес кластера
#    - >
#       MASTER_ENDPOINT=$(yc managed-kubernetes cluster get --id $CLUSTER_ID 
#       --format json | 
#       jq -r .master.endpoints.external_v4_endpoint)
#    # Добавляем файл конфигурации:
#    - >
#       kubectl config set-cluster sharuman-k8s-cluster 
#       --certificate-authority=/dev/null 
#       --server=$MASTER_ENDPOINT 
#       --kubeconfig=test.kubeconfig
#    - sed -i "s|certificate-authority: /dev/null|certificate-authority-data: ${CERT_CONTENT}|" test.kubeconfig
#    # Добавляем токен
#    - >
#       kubectl config set-credentials admin-user 
#       --token=$SA_TOKEN 
#       --kubeconfig=test.kubeconfig
#    #Добавляем инфу о контексте:
#    - >
#       kubectl config set-context default 
#       --cluster=sharuman-k8s-cluster 
#       --user=admin-user 
#       --kubeconfig=test.kubeconfig
#    - >
#       kubectl config use-context default 
#       --kubeconfig=test.kubeconfig 
#    - rm ~/.kube/config
#    - mv test.kubeconfig ~/.kube/config
    # применяем манифест вертикального автоскалера
    - rm ca.pem
    - kubectl apply -f vpa-crd.yaml
    - kubectl apply -f vpa.yaml
  
  script:
    - helm repo add nexus $NEXUS_HELM_REPO --username $NEXUS_REPO_USER --password $NEXUS_REPO_PASS
    - helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
    - helm repo add grafana https://grafana.github.io/helm-charts
    - helm repo update
    - helm install ingress-nginx ingress-nginx/ingress-nginx
    - kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.8.0/cert-manager.yaml 
    - >       
       helm upgrade --install momo-store --atomic --timeout 15m
       nexus/momo-store || true
    - >       
       helm upgrade --install momo-store --atomic --timeout 15m
       nexus/momo-store    
    - helm upgrade --atomic --install loki grafana/loki-stack
    - kubectl get services
    - echo "use external IP nginx ingress for A record of your site"    
  after_script:     
    - rm ~/.kube/config         
 